		[DllImport("libgegl-1.0.dll")]
		static extern IntPtr gegl_node_new_processor(IntPtr node, ref Gegl.Rectangle rectangle);

		public Gegl.Processor Processor(Gegl.Rectangle rectangle)
		{
			return new Gegl.Processor(gegl_node_new_processor(Handle, ref rectangle));
		}

		public void SetProperty(string property_name, object value)
		{
			IntPtr native_property_name = GLib.Marshaller.StringToPtrGStrdup (property_name);
			GLib.Value value_as_native = new GLib.Value(value);
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value_as_native);
			gegl_node_set_property(Handle, native_property_name, native_value);
			GLib.Marshaller.Free (native_property_name);
			Marshal.FreeHGlobal (native_value);
		}

		[DllImport("libgegl-1.0.dll")]
		static extern void gegl_node_get_property(IntPtr raw, IntPtr property_name, ref GLib.Value value);

		public GLib.Value GetProperty (string property_name, ref GLib.Value value) {
			IntPtr property_name_as_native = GLib.Marshaller.StringToPtrGStrdup (property_name);
			gegl_node_get_property(Handle, property_name_as_native, ref value);
			GLib.Marshaller.Free (property_name_as_native);
			return value;
		}

		[DllImport("libbabl-0.0.dll")]
		static extern IntPtr babl_format(IntPtr format);

/*		[DllImport("libgegl-1.0.dll")]
		static extern void gegl_node_blit(IntPtr raw, ref Gegl.Rectangle roi, double scale, IntPtr format, int rowstride, byte[] destination_buf, int flags);

		public byte[] Render(Gegl.Rectangle roi, double scale, string format, Gegl.BlitFlags flags) {
        		byte [] buf = new byte[roi.Width * roi.Height * 3];

			IntPtr format_as_native = GLib.Marshaller.StringToPtrGStrdup (format);
		        IntPtr bformat = babl_format(format_as_native);
			gegl_node_blit(Handle, ref roi, scale, bformat, 0, buf, (int) flags);
			GLib.Marshaller.Free (format_as_native);

			return buf;
		}*/
        
		[DllImport("libgegl-1.0.dll")]
		static extern Gegl.Rectangle gegl_node_get_bounding_box(IntPtr raw);

		public Gegl.Rectangle BoundingBox { 
			get {
				Gegl.Rectangle ret = gegl_node_get_bounding_box(Handle);
				return ret;
			}
		}
